#!/usr/bin/bash

# TODO: add prefix to custom entries and cut ~/Projects from project paths.
cache_location='/tmp/sessionizer-cache'
cache_duration=3600 # Time until refresh (seconds)
project_folder=~/Projects
ls_style='ls -lsA --color'

declare -A custom
custom[default]=~/
custom[vimconfig]=~/.config/nvim/lua

function refresh_cache () {
  touch $cache_location
  echo "$(travel $project_folder)" | tr " " "\n" > $cache_location
}

function get_custom_keys() {
  for key in "${!custom[@]}"; do
    echo $key
  done
}

function in_custom() {
  local val=$1

  for key in "${!custom[@]}"; do
    if [ "$val" == "$key" ]; then
      echo 1
    fi
  done
}

function get_custom_value() {
  local val=$1

  for key in "${!custom[@]}"; do
    if [ "$val" == "$key" ]; then
      echo ${custom[$key]}
    fi
  done
}

function is_leaf_dir () {
  local dir=$1

    # Contains .git directory
  if [[ -d "$dir/.git" ]]; then
    echo 1
    return 0
  fi

  # (contains files)
  if [[ -n $(find $dir -mindepth 1 -maxdepth 1 -not -type d) ]]; then
    echo 1
    return 0
  fi
}

function travel() {
  find $1 -mindepth 1 -maxdepth 1 -type d | while read dir; do

    if [[ $(is_leaf_dir $dir) ]]; then
      echo $dir
      continue
    fi

    # Is middle folder (no files, just folders)
    echo $(travel $dir)
  done
}

# Create function string to resolve dirs and custom entries
function get_preview_as_string() {
  echo "
    if [ -d {} ]; then
      $ls_style {}
    fi"

  for i in "${!custom[@]}"; do
    echo "if [[ '{}' = '$i' ]]; then
      $ls_style ${custom[$i]}
    fi"
  done
}

if [ "$1" == "refresh" ]; then
  echo 'Refreshed!'
  refresh_cache
fi

if [[ ! -e $cache_location ]]; then
  refresh_cache
fi


if (( ( $(date +%s) - $(date -r $cache_location "+%s") ) )); then
  refresh_cache
fi

asd=$(get_preview_as_string)
selected=$(echo "$(cat $cache_location) $(get_custom_keys)" | tr " " "\n" | fzf --preview "$(get_preview_as_string)")

if [[ $(in_custom $selected) ]]; then
  selected_name=$selected
  selected=$(get_custom_value $selected)
else
  selected_name=$(basename "$selected" | tr . _)
fi

if [[ -z $selected ]]; then
    exit 0
fi

tmux_running=$(pgrep tmux)
if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
    tmux new-session -s $selected_name -c $selected
    exit 0
fi

if ! tmux has-session -t=$selected_name 2> /dev/null; then
    tmux new-session -ds $selected_name -c $selected
fi

if [[ -z $TMUX ]]; then
    tmux attach-session -t=$selected_name
else
    tmux switch-client -t=$selected_name
fi
